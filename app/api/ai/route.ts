import { google } from '@ai-sdk/google';
import { generateText } from 'ai';
import { NextResponse } from 'next/server';

export async function POST(req: Request) {
  try {
    const { note } = await req.json();

    if (!note || typeof note !== 'string') {
      console.warn('‚ùå –ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø');
      return NextResponse.json({ error: '–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞' }, { status: 400 });
    }

    const apiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY;
    if (!apiKey) {
      console.error('üîë –ö–ª—é—á Gemini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ');
      return NextResponse.json({ error: '–ö–ª—é—á Gemini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }, { status: 500 });
    }

    const model = google('models/gemini-1.5-pro-latest');
    const result = await generateText({
      model,
      prompt: `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—é –Ω–æ—Ç–∞—Ç–∫—É: ${note}`,
    });

    // result –º–∞—î —Ç–∏–ø GenerateTextResult<ToolSet, never>
    // –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ ‚Äî –≤–æ–Ω–∞ –±—É–¥–µ –≤ result.output.finishReason –∞–±–æ result.usage
    const text = result.text;

    if (!text || typeof text !== 'string') {
      console.warn('‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç');
      return NextResponse.json({ error: '–ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç' }, { status: 500 });
    }

    return NextResponse.json({ reply: text });
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('üí• –í–∏–Ω—è—Ç–æ–∫:', error.message);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    console.error('üí• –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    return NextResponse.json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}